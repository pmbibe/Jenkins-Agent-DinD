    def userGit = "bibee"
    def userDocker = "babibe2211"
    // def repository = "https://github.com/PETW-Dapps/PETW-LDP"
    def repository = "https://github.com/bibeee/petw-ldp"
    def dockerRegistry = "https://registry.hub.docker.com"
    def branch = "main"
    def prj = "pet-ldp"
    def dockerBuildLabel = "builder"
    node("jenkins-agent-jdk17") {
            stage("Pull code from GitLab"){
                    git branch: "${branch}", credentialsId: "${userGit}", url: "${repository}"
            }
            
            stage("SonarQube") {
                sh "java -version"
                def scannerHome = tool 'SonarQubeTool';
                withSonarQubeEnv(credentialsId: 'sonarQubeJenkins') {// If you have configured more than one global server connection, you can specify its name
                  sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${prj} -Dsonar.sources=."
                }
            
            }

            stage("Quality Gate"){
                timeout(time: 1, unit: 'HOURS') {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
            }
            stage ("Build image") {
                customImage = docker.build("${userDocker}/${prj}:${BUILD_ID}", "-t ${userDocker}/${prj}:latest --no-cache --build-arg buildArg=${BUILD_ID} .")
             
            }
            stage ("Clear image") {
                env.builderLabel = dockerBuildLabel
                sh '''
                    docker image rm $(docker images --filter "label=stage=${builderLabel}" --filter "label=builID=${BUILD_ID}" | awk 'FNR == 2 {print $3}')
                '''
            }
            stage ("Push image") {
                withDockerRegistry([url: "", credentialsId: "${userDocker}"]) {
                customImage.push("${BUILD_ID}")     
                customImage.push("latest")   
                }
            }
            // stage ("Update Helm") {
            //     updateHelm = build job: 'updateHelm', 
            //         wait: true, 
            //         propagate: false,
            //         parameters: [
            //                       [
            //                         $class: 'StringParameterValue',
            //                         name: 'defaultHelmVersion',
            //                         value: "0.0.${BUILD_ID}"
            //                       ],
            //                       [
            //                         $class: 'StringParameterValue',
            //                         name: 'defaultAppVersion',
            //                         value: "${BUILD_ID}"
            //                       ]
            //                     ]
            // }
            stage ("Clear all") {
                env.user = userDocker
                env.project = prj
                sh '''
                    docker image rm ${user}/${project}:${BUILD_ID}
                    docker image rm ${user}/${project}:latest
                '''
            }
    }


      
